1. 登录
/loginRequest
POST        form-data   username、password

Request     1.成功      {"success":"true","message":"{\"age\":22,\"id\":1,\"identity\":false,\"password\":\"1234\",\"username\":\"dengbin\"}"}
                          用户信息message为：{"age":22,"id":1,"identity":false,"password":"1234","username":"dengbin"}
                            其中identity表示身份是否为医师，true为医师，false为患者
                            其中id作为后续上传和下载请求数据的标识
            2.密码错    {"success":"false","message":"error"}
            3.不存在    {"success":"false","message":"nonexistence"}



2. 注册
/registerRequest
POST        form-data   username	varchar		// not null
			password	varchar		// not null
			gender		bit				// false为男 true位女
			age		int		 
			name		varchar
			height		double
			weight		double
			phone		varchar
			identity	bit		// not null	// false为用户 true为医师

Request     1.成功      {"success":"true"}
            2.已存在    {"success":"false"}



3. 上传数据
/uploadRequest	
POST        JSON        {"id":1,"info":
				{"time":1556909140304, 
				 "wave":"[1, 2]"},
				 "accel":""}
                          其中id用于表示上传的用户
                            info为一组数据：其中包含
				time：格林威治时间(64位)，
				wave：脉搏波波形数据(1个由脉搏波数据数组转化的字符串)，
				accel：六轴加速度数据(1个由六轴加速度数据数组转化的字符串，若仅上传脉搏波数据则为空字符串)，

Request     1.成功      {"success":"true"}
            2.id        {"success":"false"}


4. 实时波形数据
/constantWaveRequest
/constantWaveRequest?id=1&prevTime=13
GET         params id=1 prevTime=13
            其中id用于表示上传的用户
            prevTime表示上一次最后的时刻（因为可能由于网卡等原因，不一定每次都请求成功）：
                1.若为第一次请求，即为实际请求时刻-1
                2.若为中间请求，即为上一次请求的最后一个时刻


Request     1.成功    [{"time":14,"value":"147"},{"time":15,"value":"176"}]	
                        一个Array的脉搏波数据


5. 下载波形数据
/downloadWaveRequest
/downloadWaveRequest?id=10&startTime=1556909145292&endTime=1556909145292
GET         params id=1 startTime=6 endTime=9
            其中id用于表示上传的用户
            [startTime,endTime]为起止时间

Request     1.成功   
{
        "success": "true",
        "wave": [
            {
                "time": 1556909145292,
                "wave": "[267053, 266904, 266965, 266806, 267036, 267148, 267091, 267032, 267044, 267204, 267000, 266985, 267209, 267033, 267191, 267017, 267147, 266964, 267228, 267016, 267032, 267023, 267137, 267177, 267031, 267204, 267228, 267228, 267323, 267158, 267117, 267345, 267223, 267339, 267431, 267359, 267562, 267249, 267323, 267407, 267390, 267458, 267477, 267403, 267479, 267596, 267663, 267440, 267605, 267475, 267499, 267327, 267437, 267497, 267738, 267577, 267577, 267596, 267547, 267494, 267722, 267526, 267554, 267977, 267678, 267810, 267710, 267833, 267888, 267839, 267863, 267890, 268089, 268038, 267952, 267812, 267916, 268073, 267948, 268046, 267833, 268268, 268074, 267962, 268043, 268197, 268057, 268294, 268060, 268129, 268350, 268213, 268064, 268167, 268207, 268392, 268199, 268218, 268347, 268435, 268333, 268320, 268347, 268386, 268360, 268498, 268454, 268337, 268582, 268558, 268467, 268537, 268521, 268552, 268624, 268551, 268482, 268793, 268588, 268650, 268770, 268687, 268742, 268774, 268896, 268817, 269042, 268855, 268868, 268862, 269082, 268976, 268878, 269042, 268950, 267722, 268866, 268810, 268652, 268565, 268478, 268282, 268140, 267825, 266714, 267563, 267543, 267297, 267207, 266956, 267008, 266895, 266788, 266999, 266664, 266895, 266827, 266692, 266616, 266887, 266832, 266819, 267147, 267078, 267026, 266784, 266951, 267006, 266987, 267006, 267078, 266818, 267008, 266978, 267014, 266855, 266944, 267116, 266862, 267048, 267012, 267016, 266800, 266981, 267150, 266910, 267012, 266930, 267085, 267073, 266953, 267206, 267232, 266985, 267094, 266921, 267080, 267080]"
            }
        ]
}

6. 下载整个信息数据
/downloadInfoRequest
/downloadInfoRequest?id=10&startTime=1556909145292&endTime=1556909145292
GET         params id=1 startTime=6 endTime=7
            其中id用于表示上传的用户
            [startTime,endTime]为起止时间

Request     1.成功    
{
        "success": "true",
        "info": [
            {
                "accel": "",
                "time": 1556909145292,
                "wave": "[267053, 266904, 266965, 266806, 267036, 267148, 267091, 267032, 267044, 267204, 267000, 266985, 267209, 267033, 267191, 267017, 267147, 266964, 267228, 267016, 267032, 267023, 267137, 267177, 267031, 267204, 267228, 267228, 267323, 267158, 267117, 267345, 267223, 267339, 267431, 267359, 267562, 267249, 267323, 267407, 267390, 267458, 267477, 267403, 267479, 267596, 267663, 267440, 267605, 267475, 267499, 267327, 267437, 267497, 267738, 267577, 267577, 267596, 267547, 267494, 267722, 267526, 267554, 267977, 267678, 267810, 267710, 267833, 267888, 267839, 267863, 267890, 268089, 268038, 267952, 267812, 267916, 268073, 267948, 268046, 267833, 268268, 268074, 267962, 268043, 268197, 268057, 268294, 268060, 268129, 268350, 268213, 268064, 268167, 268207, 268392, 268199, 268218, 268347, 268435, 268333, 268320, 268347, 268386, 268360, 268498, 268454, 268337, 268582, 268558, 268467, 268537, 268521, 268552, 268624, 268551, 268482, 268793, 268588, 268650, 268770, 268687, 268742, 268774, 268896, 268817, 269042, 268855, 268868, 268862, 269082, 268976, 268878, 269042, 268950, 267722, 268866, 268810, 268652, 268565, 268478, 268282, 268140, 267825, 266714, 267563, 267543, 267297, 267207, 266956, 267008, 266895, 266788, 266999, 266664, 266895, 266827, 266692, 266616, 266887, 266832, 266819, 267147, 267078, 267026, 266784, 266951, 267006, 266987, 267006, 267078, 266818, 267008, 266978, 267014, 266855, 266944, 267116, 266862, 267048, 267012, 267016, 266800, 266981, 267150, 266910, 267012, 266930, 267085, 267073, 266953, 267206, 267232, 266985, 267094, 266921, 267080, 267080]"
            }
        ]
}

7. 获取时间范围请求
/getTimeRangeRequest
/getTimeRangeRequest?id=11
GET
Request     1.成功 	{"success":"true","timeRange":{"maxTime":1556909145298,"minTime":1556909145291}}